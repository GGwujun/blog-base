{"version":3,"file":"src.cjs.production.min.js","sources":["../src/util/escape.ts","../src/util/isFence.ts","../src/util/isCode.ts","../src/util/isKeep.ts","../src/util/replacement/fence.ts","../src/util/findParentNumber.ts","../src/util/repeat.ts","../src/util/indentCodeIsListfirstChild.ts","../src/util/findOrderListIndentNumber.ts","../src/util/replacement/list/listNode.ts","../src/util/replacement/list/index.ts","../src/util/replacement/keep.ts","../src/util/replacement/blank.ts","../src/plugins/list.ts","../src/plugins/hr.ts","../src/plugins/paragraph.ts","../src/plugins/heading.ts","../src/plugins/fencedCodeBlock.ts","../src/plugins/code.ts","../src/plugins/referenceLinks.ts","../src/plugins/table.ts","../src/plugins/indentedCodeBlock.ts","../src/plugins/blockquote.ts","../src/plugins/em.ts","../src/plugins/del.ts","../src/plugins/link.ts","../src/plugins/image.ts","../src/plugins/br.ts","../src/plugins/strong.ts","../src/plugins/taskListItems.ts","../src/util/collapse-whitespace.ts","../src/util/isBlock.ts","../src/util/isVoid.ts","../src/service/HTMLParser.ts","../src/service/RootNode.ts","../src/service/Rules/findRule.ts","../src/service/Rules/index.ts","../src/service/Node/isBlank.ts","../src/service/Node/flankingWhitespace.ts","../src/service/Node/index.ts","../src/util/join.ts","../src/service/index.ts","../src/index.ts","../src/plugins/index.ts"],"sourcesContent":["export function escape(\n  escapes: [RegExp, string | ((substring: string, ...args: any[]) => string)][],\n  string: string\n) {\n  return escapes.reduce(function(accumulator, escape) {\n    return accumulator.replace(escape[0], <string>escape[1]);\n  }, string);\n}\n","import { Options, Node } from '../types';\n\nexport function isFence(options: Options, node: Node): boolean {\n  return !!(\n    options.codeBlockStyle === 'fenced' &&\n    node.nodeName === 'PRE' &&\n    node.firstChild &&\n    node.firstChild.nodeName === 'CODE'\n  );\n}\n","import { Node } from '../types';\n\nexport function isCode(node: Node) {\n  var hasSiblings = node.previousSibling || node.nextSibling;\n  var isCodeBlock =\n    node.parentNode && node.parentNode.nodeName === 'PRE' && !hasSiblings;\n\n  return node.nodeName === 'CODE' && !isCodeBlock;\n}\n","import { Options, Node } from '../types';\n\nexport function isKeep(options: Options, node: Node): boolean {\n  const filters = options.keepFilter ? options.keepFilter : ['div', 'style'];\n\n  return Array.isArray(filters)\n    ? filters.some(filter => filter === node.nodeName.toLowerCase())\n    : typeof filters === 'function'\n    ? filters(node, options)\n    : filters === node.nodeName.toLowerCase();\n}\n","import { Options } from '../../types';\n\nexport function fenceReplacement(\n  content: string,\n  node: HTMLElement | Document | DocumentFragment | Element,\n  options: Options\n) {\n  var className = node.firstChild ? (node.firstChild as Element).className : '';\n  var language = (className.match(/language-(\\S+)/) || [null, ''])[1];\n  var startFence =\n    options.startFence != undefined ? options.startFence : options.fence;\n  var endFence =\n    options.endFence != undefined ? options.endFence : options.fence;\n\n  var parent = node.parentNode;\n  var parentIsList = parent && parent.nodeName === 'LI';\n  return (\n    (parentIsList ? '\\n' : '\\n\\n') +\n    startFence +\n    language +\n    '\\n' +\n    (node.firstChild ? node.firstChild.textContent : '') +\n    ((node.firstChild &&\n      node.firstChild.textContent &&\n      node.firstChild.textContent.endsWith('\\n')) ||\n    !content\n      ? ''\n      : '\\n') +\n    endFence +\n    '\\n\\n'\n  );\n}\n","import { Node } from '../types';\n\nexport function findParentNumber(\n  node: Node,\n  parentName: string,\n  count = 0\n): number {\n  if (!node.parentNode) {\n    return count;\n  }\n  if (node.parentNode.nodeName === parentName) {\n    count++;\n  }\n\n  return findParentNumber(node.parentNode as HTMLElement, parentName, count);\n}\n","export function repeat(character: string, count: number) {\n  return Array(count + 1).join(character);\n}\n","import { Options, Node } from '../types';\n\nexport function IndentCodeIsListfirstChild(list: Node, options: Options) {\n  return (\n    options.codeBlockStyle !== 'fenced' &&\n    list &&\n    list.firstChild &&\n    list.nodeName === 'LI' &&\n    list.firstChild.nodeName === 'PRE'\n  );\n}\n","import { Node } from '../types';\n\nexport function findOrderListIndentNumber(node: Node, count = 0): number {\n  const parentName = 'OL';\n  const parent = node.parentNode as HTMLElement;\n  if (!parent) {\n    return count;\n  }\n  if (parent.nodeName === parentName) {\n    var start = parent.getAttribute('start');\n    if (start && start.length > 1) {\n      count += start.length - 1;\n    }\n  }\n\n  return findOrderListIndentNumber(parent, count);\n}\n","import { Node, Options } from '../../../types';\nimport { findParentNumber } from '../../findParentNumber';\nimport { repeat } from '../../repeat';\nimport { IndentCodeIsListfirstChild } from '../../indentCodeIsListfirstChild';\nimport { findOrderListIndentNumber } from '../../findOrderListIndentNumber';\n\nexport class ListNode {\n  node: Node;\n\n  constructor(node: Node) {\n    this.node = node;\n  }\n\n  private get parent() {\n    return this.node.parentNode;\n  }\n\n  get parentIsOL() {\n    return this.parent && this.parent.nodeName === 'OL';\n  }\n\n  get nestULCount() {\n    return findParentNumber(this.node, 'UL');\n  }\n\n  get nestOLCount() {\n    return findParentNumber(this.node, 'OL');\n  }\n\n  get nestCount() {\n    return this.nestULCount + this.nestOLCount;\n  }\n\n  get isLoose() {\n    const node = this.node;\n    return node.firstChild && node.firstChild.nodeName === 'P'; // Todo:isBlock\n  }\n\n  get isNewList() {\n    const parent = this.parent;\n    return (\n      parent &&\n      parent.previousSibling &&\n      parent.previousSibling.nodeName === parent.nodeName\n    );\n  }\n\n  get followCode() {\n    const parent = this.parent;\n    return (\n      parent && parent.nextSibling && parent.nextSibling.nodeName === 'PRE'\n    );\n  }\n\n  get inLast() {\n    const parent = this.parent;\n    return parent && parent.lastChild === this.node;\n  }\n\n  get nestListAndParentIsEmpty() {\n    const { nestOLCount, nestULCount, node } = this;\n    return (\n      nestOLCount + nestULCount > 1 &&\n      node.parentNode &&\n      node.parentNode.parentNode &&\n      (node.parentNode.parentNode as HTMLElement).innerHTML ===\n        (node.parentNode as HTMLElement).outerHTML\n    );\n  }\n\n  lineIndent(options: Options) {\n    const { nestOLCount, nestULCount, nestCount, node } = this;\n    var indent = `\\n    ${repeat(' ', nestCount - 1)}$1`;\n    if (IndentCodeIsListfirstChild(node, options) && nestOLCount) {\n      indent = `\\n  ${repeat(' ', nestCount)}$1`;\n    } else if (nestULCount) {\n      indent = `\\n${repeat(' ', nestCount * 2)}$1`;\n    }\n    return indent;\n  }\n\n  caclPrefix(input: string) {\n    let prefix = input;\n    const {\n      nestOLCount,\n      nestULCount,\n      parentIsOL,\n      node,\n      parent,\n      isNewList,\n      inLast,\n      isLoose,\n      followCode,\n      nestListAndParentIsEmpty,\n    } = this;\n    if (parent && parentIsOL) {\n      var start = (parent as HTMLElement).getAttribute('start');\n      var index = Array.prototype.indexOf.call(parent.children, node);\n      prefix =\n        (start ? Number(start) + index : index + 1) +\n        (isNewList ? ')  ' : '.  ');\n    }\n    if (followCode) {\n      if (!isLoose) prefix = ' ' + prefix + '   '; // example 235\n      if (inLast && isLoose) {\n        // example 293\n        prefix = '  ' + prefix;\n      }\n    }\n\n    if (nestULCount > 1) {\n      prefix = repeat(' ', (nestULCount - 1) * 2) + prefix;\n    }\n    if (nestULCount && nestOLCount) {\n      const indent = findOrderListIndentNumber(node);\n      prefix = repeat(' ', nestULCount * 4 + indent) + prefix;\n    }\n    // Info：嵌套列表且父列表为空\n    if (nestListAndParentIsEmpty) {\n      prefix = prefix.trimStart();\n    }\n\n    return prefix;\n  }\n}\n","import { Options, Node } from '../../../types';\nimport { ListNode } from './listNode';\n\nexport function listReplacement(content: string, node: Node, options: Options) {\n  var listNode = new ListNode(node);\n  var { isLoose, isNewList: newList } = listNode;\n\n  var bulletListMarker = newList ? '+' : options.bulletListMarker;\n  var prefix = listNode.caclPrefix(bulletListMarker + ' ');\n\n  content = content\n    .replace(/^\\n+/, '') // remove leading newlines\n    .replace(/\\n+$/, '\\n') // replace trailing newlines with just a single one\n    .replace(/\\n(\\S)/gm, listNode.lineIndent(options)); // indent\n\n  return (\n    prefix +\n    content +\n    (node.nextSibling && !/\\n$/.test(content) ? '\\n' : '') +\n    (isLoose ? '\\n' : '')\n  );\n}\n","import { Node } from '../../types';\n\nexport function keepReplacement(content: string, node: Node) {\n  let html = (node as HTMLElement).outerHTML;\n  if (!content) {\n    let attrs = '';\n    for (let i = 0; i < node.attributes.length; i++) {\n      let attr = node.attributes[i];\n      attrs += `${attr.name}=\"${attr.nodeValue}\"`;\n    }\n    html = `<${node.localName.toLowerCase()} ${attrs} />`;\n  }\n  return node.isBlock ? '\\n\\n' + html + '\\n' : html;\n}\n","// blank\nimport { isCode } from '../isCode';\nimport { isFence } from '../isFence';\nimport { isKeep } from '../isKeep';\nimport { fenceReplacement } from './fence';\nimport { listReplacement } from './list';\nimport { keepReplacement } from './keep';\nimport { Options, Node } from '../../types';\n\nexport function blankReplacement(\n  content: string,\n  node: Node,\n  options: Options\n) {\n  if (isKeep(options, node)) {\n    return keepReplacement(content, node);\n  } else if (isFence(options, node)) {\n    return fenceReplacement(content, node, options);\n  } else if (isCode(node)) {\n    var delimiter = options.codeDelimiter ? options.codeDelimiter : '`';\n\n    return (\n      delimiter +\n      (options.codeBlockStyle === 'fenced' ? ' ' : '') +\n      (content || ' ') +\n      delimiter +\n      '\\n'\n    );\n  } else if (node.nodeName.toLowerCase() === 'blockquote') {\n    return '>';\n  } else if (node.nodeName.toLowerCase() === 'li') {\n    return listReplacement(content, node, options);\n  } else if (node.nodeName.toLowerCase() === 'ul') {\n    return content + '\\n\\n';\n  }\n  return node.isBlock ? content + '\\n\\n' : '';\n}\n","// list\nimport Service from '../service';\nimport { listReplacement } from '../util';\n\nexport const applyListRule = (service: Service) => {\n  service.addRule('list', {\n    filter: ['ul', 'ol'],\n\n    replacement: function(content, node) {\n      var parent = node.parentNode;\n      if (\n        parent &&\n        parent.nodeName === 'LI' &&\n        parent.lastElementChild === node\n      ) {\n        return '\\n' + content;\n      } else {\n        return '\\n\\n' + content + '\\n\\n';\n      }\n    },\n  });\n\n  service.addRule('listItem', {\n    filter: 'li',\n\n    replacement: listReplacement,\n  });\n};\n","import Service from '../service';\n\nexport const applyHrRule = (service: Service) => {\n  service.addRule('hr', {\n    filter: 'hr',\n\n    replacement: function(_, __, options) {\n      return '\\n' + options.hr + '\\n';\n    },\n  });\n};\n","import Service from '../service';\n\nvar escapes: [RegExp, string][] = [[/\\s-/g, ' \\\\-']];\n\nfunction escape(string: string) {\n  return escapes.reduce(function(accumulator, escape) {\n    return accumulator.replace(escape[0], escape[1]);\n  }, string);\n}\nexport const applyParagraphRule = (service: Service) => {\n  service.addRule('paragraph', {\n    filter: 'p',\n\n    replacement: function(content, node) {\n      const hasCommentChild = Array.from(node.childNodes).some(\n        item => item.nodeType === 8\n      );\n      return '\\n\\n' + (hasCommentChild ? content : escape(content)) + '\\n\\n';\n    },\n  });\n};\n","import Service from '../service';\nimport { repeat, escape } from '../util';\n\nvar escapes: [RegExp, string][] = [[/\\s#/g, ' \\\\#']];\n\nexport const applyHeadingRule = (service: Service) => {\n  service.addRule('heading', {\n    filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n\n    replacement: function(content, node, options) {\n      var hLevel = Number(node.nodeName.charAt(1));\n\n      if (options.headingStyle === 'setext' && hLevel < 3) {\n        var underline = repeat(hLevel === 1 ? '=' : '-', content.length);\n        return '\\n\\n' + content + '\\n' + underline + '\\n\\n';\n      } else {\n        return (\n          '\\n\\n' + repeat('#', hLevel) + ' ' + escape(escapes, content) + '\\n\\n'\n        );\n      }\n    },\n  });\n};\n","import Service from '../service';\nimport { fenceReplacement, isFence } from '../util';\n\nexport const applyFenceRule = (service: Service) => {\n  service.addRule('fencedCodeBlock', {\n    filter: function(node, options) {\n      return isFence(options, node);\n    },\n\n    replacement: fenceReplacement,\n  });\n};\n","import Service from '../service';\nimport { Options } from '../types';\n\nexport const applyCodeRule = (service: Service) => {\n  service.addRule('code', {\n    filter: function(node) {\n      var hasSiblings = node.previousSibling || node.nextSibling;\n      var isCodeBlock =\n        node.parentNode && node.parentNode.nodeName === 'PRE' && !hasSiblings;\n\n      return node.nodeName === 'CODE' && !isCodeBlock;\n    },\n\n    replacement: function(content, _, options: Options) {\n      if (!content.trim()) return '';\n\n      var delimiter = options.codeDelimiter || '`';\n      var leadingSpace = '';\n      var trailingSpace = '';\n      var matches = content.match(/`+/gm);\n      if (matches) {\n        if (/^`/.test(content)) leadingSpace = ' ';\n        if (/`$/.test(content)) trailingSpace = ' ';\n        while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';\n      }\n\n      return delimiter + leadingSpace + content + trailingSpace + delimiter;\n    },\n  });\n};\n","import Service from '../service';\nimport { escape } from '../util';\n\nconst escapes: [RegExp, string][] = [\n  [/\\*/g, '\\\\*'],\n  [/\"/g, '\\\\\"'],\n];\nexport const applyReferenceLinkRule = (service: Service) => {\n  service.addRule('referenceLink', {\n    filter: function(node, options) {\n      return !!(\n        options.linkStyle === 'referenced' &&\n        node.nodeName === 'A' &&\n        node.getAttribute('href')\n      );\n    },\n\n    replacement: function(content, node: any, options) {\n      var href = escape(escapes, decodeURIComponent(node.getAttribute('href')));\n      if (href.includes(' ')) {\n        href = '<' + href + '>';\n      }\n      var title = node.title ? ' \"' + escape(escapes, node.title) + '\"' : '';\n      var replacement;\n      var reference;\n\n      switch (options.linkReferenceStyle) {\n        case 'collapsed':\n          replacement = '[' + content + '][]';\n          reference = '[' + content + ']: ' + href + title;\n          break;\n        case 'shortcut':\n          replacement = '[' + content + ']';\n          reference = '[' + content + ']: ' + href + title;\n          break;\n        default:\n          var id =\n            this.references && this.references.length\n              ? 'ref' + (this.references.length + 1)\n              : 'ref';\n          replacement = '[' + content + '][' + id + ']';\n          reference = '[' + id + ']: ' + href + title;\n      }\n\n      this.references && this.references.push(reference);\n      return replacement;\n    },\n\n    references: [],\n\n    unshift: function() {\n      var references = '';\n      if (this.references && this.references.length) {\n        references = '\\n\\n' + this.references.join('\\n') + '\\n\\n';\n        this.references = []; // Reset references\n      }\n      return references;\n    },\n  });\n};\n","import { escape } from '../util';\nimport Service from '../service';\nimport { Node, Options } from '../types';\nconst escapes: [\n  RegExp,\n  string | ((substring: string, ...args: any[]) => string)\n][] = [\n  [\n    /(.*)\\|(.*)/g,\n    (match, p1, p2) => {\n      if (match.match(/\\`.*\\|.*\\`/)) {\n        return `${p1}\\|${p2}`;\n      }\n      return `${p1}\\\\|${p2}`;\n    },\n  ],\n];\n\nvar every = Array.prototype.every;\nvar indexOf = Array.prototype.indexOf;\n\nfunction cell(content: string, node: Node, options?: Options) {\n  var index = node.parentNode\n    ? indexOf.call(node.parentNode.childNodes, node)\n    : -1;\n  var prefix = ' ';\n  if (options && options.convertNoHeaderTable) {\n    content = content.replace(/\\n+/g, '<br>');\n  }\n  if (index === 0) prefix = '| ';\n  return prefix + escape(escapes, content) + ' |';\n}\nfunction isFirstTbody(element: Node & ParentNode) {\n  var previousSibling = element.previousSibling;\n  return (\n    element.nodeName === 'TBODY' &&\n    (!previousSibling ||\n      (previousSibling.nodeName === 'THEAD' &&\n        /^\\s*$/i.test(previousSibling.textContent || '')))\n  );\n}\nfunction isHeadingRow(tr: Node) {\n  var parentNode = tr.parentNode;\n  return parentNode\n    ? parentNode.nodeName === 'THEAD' ||\n        (parentNode.firstChild === tr &&\n          (parentNode.nodeName === 'TABLE' ||\n            isFirstTbody(parentNode as Node)) &&\n          every.call(tr.childNodes, function(n: HTMLElement) {\n            return n.nodeName === 'TH';\n          }))\n    : false;\n}\n\nexport const applyTableRule = (service: Service) => {\n  service.keep(function(node: Node) {\n    return (\n      node.nodeName === 'TABLE' &&\n      !isHeadingRow((node as HTMLTableElement).rows[0])\n    );\n  });\n\n  service.addRule('table', {\n    filter: function(node) {\n      return (\n        node.nodeName === 'TABLE' &&\n        isHeadingRow((node as HTMLTableElement).rows[0])\n      );\n    },\n\n    replacement: function(content) {\n      // Ensure there are no blank lines\n      content = content.replace('\\n\\n', '\\n');\n      return '\\n\\n' + content + '\\n\\n';\n    },\n  });\n\n  service.addRule('tableSection', {\n    filter: ['thead', 'tbody', 'tfoot'],\n    replacement: function(content: string) {\n      return content;\n    },\n  });\n\n  service.addRule('tableRow', {\n    filter: 'tr',\n    replacement: function(content, node) {\n      var borderCells = '';\n      const alignMap: { [key: string]: string } = {\n        left: ':--',\n        right: '--:',\n        center: ':-:',\n      };\n\n      if (isHeadingRow(node)) {\n        for (var i = 0; i < node.childNodes.length; i++) {\n          var border = '---';\n          const curNode = node.childNodes[i] as HTMLElement;\n          var align = (\n            curNode.getAttribute('align') ||\n            curNode.style.textAlign ||\n            ''\n          ).toLowerCase();\n\n          if (align) border = alignMap[align] || border;\n\n          borderCells += cell(border, curNode);\n        }\n      }\n      return '\\n' + content + (borderCells ? '\\n' + borderCells : '');\n    },\n  });\n\n  service.addRule('tableCell', {\n    filter: ['th', 'td'],\n    replacement: function(content: string, node: Node, options) {\n      return cell(content, node, options);\n    },\n  });\n\n  service.addRule('noHeaderTable', {\n    filter: function(node, options) {\n      const hasHead = Array.from(node.childNodes).some(\n        n => n.nodeName === 'THEAD'\n      );\n      if (\n        node.nodeName === 'TABLE' &&\n        !hasHead &&\n        options.convertNoHeaderTable\n      ) {\n        try {\n          const tr = node.querySelector('tr');\n          if (tr) {\n            const length = tr.cells.length;\n            const header = (node as HTMLTableElement).createTHead();\n            const row = header.insertRow(0);\n            // console.dir(node);\n            for (let i = 0; i < length; i++) {\n              const cell = row.insertCell(i);\n              cell.innerHTML = ' ';\n            }\n          }\n        } catch (e) {\n          console.log(e);\n          return false;\n        }\n        return true;\n      }\n      return false;\n    },\n\n    replacement: function(content) {\n      return content;\n    },\n  });\n};\n","import { Options, Node } from '../types';\nimport {\n  findOrderListIndentNumber,\n  findParentNumber,\n  repeat,\n  IndentCodeIsListfirstChild,\n} from '../util';\nimport Service from '../service';\n\nfunction caclListIndent(node: Node, options: Options): number {\n  var nestULCount = findParentNumber(node, 'UL');\n  var nestOLCount = findParentNumber(node, 'OL');\n  if (nestOLCount) {\n    // Info:如果这个缩进代码父元素是有序列表，并它是第一个元素\n    const parentNode = node.parentNode;\n    const isFirstChild =\n      parentNode &&\n      parentNode.firstChild &&\n      parentNode.nodeName === 'LI' &&\n      parentNode.firstChild === node;\n    const IndentCodeIsfirstChild = IndentCodeIsListfirstChild(\n      parentNode as HTMLElement,\n      options\n    );\n    return (\n      nestULCount * 2 +\n      nestOLCount * 4 +\n      4 +\n      findOrderListIndentNumber(node) +\n      (isFirstChild ? -4 : 0) +\n      (IndentCodeIsfirstChild ? -1 : 0)\n    );\n  }\n  return nestULCount * 2 + 4;\n}\nexport const applyIndentedCodeBlockRule = (service: Service) => {\n  service.addRule('indentedCodeBlock', {\n    filter: function(node, options) {\n      return !!(\n        options.codeBlockStyle === 'indented' &&\n        node.nodeName === 'PRE' &&\n        node.firstChild &&\n        node.firstChild.nodeName === 'CODE'\n      );\n    },\n\n    replacement: function(_: string, node, options: Options) {\n      const indent = repeat(' ', caclListIndent(node, options));\n      return node.firstChild && node.firstChild.textContent\n        ? '\\n\\n' +\n            indent +\n            node.firstChild.textContent.replace(/\\n/g, '\\n' + indent) +\n            '\\n\\n'\n        : '\\n\\n    \\n\\n';\n    },\n  });\n};\n","import Service from '../service';\n\nexport const applyBlockquoteRule = (service: Service) => {\n  service.addRule('hr', {\n    filter: 'blockquote',\n\n    replacement: function(content, node) {\n      var parent = node.parentNode;\n      var parentIsList = parent && parent.nodeName === 'LI';\n      var blank = parentIsList ? '\\n' : '\\n\\n';\n      content = content.replace(/^\\n+|\\n+$/g, '').replace(/^/gm, '> ');\n      return blank + content + blank;\n    },\n  });\n};\n","//em\nimport Service from '../service';\n\nexport const applyEmRule = (service: Service) => {\n  service.addRule('em', {\n    filter: ['em', 'i'],\n\n    replacement: function(content, node, options) {\n      if (!content.trim()) return '';\n      let emDelimiter = options.emDelimiter;\n      if (\n        node.parentNode &&\n        node.parentNode.nodeName === 'EM' &&\n        node.parentNode.firstChild === node.parentNode.lastChild\n      ) {\n        emDelimiter = emDelimiter === '_' ? '*' : '_';\n      }\n      return emDelimiter + content + emDelimiter;\n    },\n  });\n};\n","// del\nimport Service from '../service';\n\nexport const applyDelRule = (service: Service) => {\n  service.addRule('del', {\n    filter: ['del', 's'],\n\n    replacement: function(content) {\n      return '~~' + content + '~~';\n    },\n  });\n};\n","import Service from '../service';\nimport { escape } from '../util';\n\nconst specialChars = [' ', '(', ')', '\\\\', '\"'];\nconst escapes: [RegExp, string][] = [[/\"/g, '&quot;']];\nexport const applyLinkRule = (service: Service) => {\n  service.addRule('link', {\n    filter: function(node, options) {\n      return !!(options.linkStyle === 'inlined' && node.nodeName === 'A');\n    },\n\n    replacement: function(content, node) {\n      var href = (node as HTMLElement).getAttribute('href');\n      if (!href && !content) {\n        return '';\n      }\n      // Info:autolink\n      var normalizeHref = href\n        ? decodeURIComponent(href).replace('mailto:', '')\n        : '';\n      if (node.firstChild && normalizeHref === node.firstChild.nodeValue) {\n        return '<' + node.firstChild.nodeValue + '>';\n      }\n      if (\n        href &&\n        normalizeHref.split('').some(char => specialChars.includes(char))\n      ) {\n        href = '<' + decodeURIComponent(href) + '>';\n      }\n      var title = escape(escapes, (node as HTMLElement).title);\n      title = title ? ' \"' + title + '\"' : '';\n      return '[' + content + '](' + href + title + ')';\n    },\n  });\n};\n","import Service from '../service';\n\nexport const applyImageRule = (service: Service) => {\n  service.addRule('hr', {\n    filter: 'img',\n\n    replacement: function(_content, node) {\n      var alt = node.getAttribute('alt') || '';\n      var src = node.getAttribute('src') || '';\n      var title = node.title || '';\n      var titlePart = title ? ' \"' + title + '\"' : '';\n      return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : '';\n    },\n  });\n};\n","import Service from '../service';\n\nexport const applyBrRule = (service: Service) => {\n  service.addRule('hr', {\n    filter: 'br',\n\n    replacement: function(_content, _node, options) {\n      return options.br + '\\n';\n    },\n  });\n};\n","import Service from '../service';\n\nexport const applyStrongRule = (service: Service) => {\n  service.addRule('hr', {\n    filter: ['strong', 'b'],\n\n    replacement: function(content, _node, options) {\n      if (!content.trim()) return '';\n      return options.strongDelimiter + content + options.strongDelimiter;\n    },\n  });\n};\n","import Service from '../service';\n\nexport const applyTaskRule = (service: Service) => {\n  service.addRule('task', {\n    filter: function(node) {\n      return (\n        (node as HTMLInputElement).type === 'checkbox' &&\n        node.parentNode != null &&\n        node.parentNode.nodeName === 'LI'\n      );\n    },\n    replacement: function(_content, node) {\n      return ((node as HTMLInputElement).checked ? '[x]' : '[ ]') + ' ';\n    },\n  });\n};\n","import isBlock from './isBlock';\nimport isVoid from './isVoid';\nimport { Node } from '../types';\n\ninterface Options {\n  element: Node;\n  isBlock: typeof isBlock;\n  isVoid: typeof isVoid;\n  isPre?: (node: Node) => boolean;\n}\n\n/**\n * collapseWhitespace(options) removes extraneous whitespace from an the given element.\n *\n * @param {Object} options\n */\nfunction collapseWhitespace(options: Options) {\n  var element = options.element;\n  var isBlock = options.isBlock;\n  var isVoid = options.isVoid;\n  var isPre =\n    options.isPre ||\n    function(node: any) {\n      return node.nodeName === 'PRE';\n    };\n\n  if (!element.firstChild || isPre(element)) return;\n\n  var prevText = null;\n  var prevVoid = false;\n\n  var prev = null;\n  var node = next(prev, element, isPre);\n\n  while (node !== element) {\n    if (node.nodeType === 3 || node.nodeType === 4) {\n      // Node.TEXT_NODE or Node.CDATA_SECTION_NODE\n      var text = node.data ? node.data.replace(/[ \\r\\n\\t]+/g, ' ') : '';\n      if (\n        (!prevText || !prevText.data || / $/.test(prevText.data)) &&\n        !prevVoid &&\n        text[0] === ' '\n      ) {\n        text = text.substr(1);\n      }\n\n      // `text` might be empty at this point.\n      if (!text) {\n        node = remove(node);\n        continue;\n      }\n\n      node.data = text;\n\n      prevText = node;\n    } else if (node.nodeType === 1) {\n      // Node.ELEMENT_NODE\n      if (isBlock(node) || node.nodeName === 'BR') {\n        if (prevText && prevText.data) {\n          prevText.data = prevText.data.replace(/ $/, '');\n        }\n\n        prevText = null;\n        prevVoid = false;\n      } else if (isVoid(node)) {\n        // Avoid trimming space around non-block, non-BR void elements.\n        prevText = null;\n        prevVoid = true;\n      }\n    } else if (node.nodeType === 8) {\n      if (node.nextElementSibling && node.parentNode) {\n        const index = Array.from(node.parentNode.childNodes).findIndex(\n          n => n === node\n        );\n        (node.parentNode.childNodes[index + 1] as Node).unNeedEscape = true;\n      }\n    } else {\n      node = remove(node);\n      continue;\n    }\n\n    var nextNode = next(prev, node, isPre);\n    prev = node;\n    node = nextNode;\n  }\n\n  if (prevText && prevText.data) {\n    prevText.data = prevText.data.replace(/ $/, '');\n    if (!prevText.data) {\n      remove(prevText);\n    }\n  }\n}\n\n/**\n * remove(node) removes the given node from the DOM and returns the\n * next node in the sequence.\n *\n * @param {Node} node\n * @return {Node} node\n */\nfunction remove(node: Node) {\n  var next = node.nextSibling || node.parentNode;\n\n  node.parentNode && node.parentNode.removeChild(node);\n\n  return next as Node;\n}\n\n/**\n * next(prev, current, isPre) returns the next node in the sequence, given the\n * current and previous nodes.\n *\n * @param {Node} prev\n * @param {Node} current\n * @param {Function} isPre\n * @return {Node}\n */\nfunction next(\n  prev: Node | null,\n  current: Node,\n  isPre: (node: Node) => boolean\n) {\n  if ((prev && prev.parentNode === current) || isPre(current)) {\n    return (current.nextSibling || current.parentNode) as Node;\n  }\n\n  return (current.firstChild ||\n    current.nextSibling ||\n    current.parentNode) as Node;\n}\n\nexport default collapseWhitespace;\n","import { Node } from '../types';\n\nvar blockElements = [\n  'address',\n  'article',\n  'aside',\n  'audio',\n  'blockquote',\n  'body',\n  'canvas',\n  'center',\n  'dd',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'isindex',\n  'li',\n  'main',\n  'menu',\n  'nav',\n  'noframes',\n  'noscript',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'section',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n];\n\nexport default function isBlock(node: Node) {\n  return blockElements.indexOf(node.nodeName.toLowerCase()) !== -1;\n}\n","import { Node } from '../types';\n\nexport const voidElements = [\n  'area',\n  'base',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr',\n];\n\nexport default function isVoid(node: Node) {\n  return voidElements.indexOf(node.nodeName.toLowerCase()) !== -1;\n}\n","/*\n * Set up window for Node.js\n */\n\nvar root = typeof window !== 'undefined' ? window : {};\n\n/*\n * Parsing HTML strings\n */\n\nfunction canParseHTMLNatively() {\n  var Parser = (root as Window & typeof globalThis).DOMParser;\n  var canParse = false;\n\n  // Adapted from https://gist.github.com/1129031\n  // Firefox/Opera/IE throw errors on unsupported types\n  try {\n    // WebKit returns null on unsupported types\n    if (new Parser().parseFromString('', 'text/html')) {\n      canParse = true;\n    }\n  } catch (e) {}\n\n  return canParse;\n}\n\nclass Parser {\n  parseFromString(string: string) {\n    const JSDOM = require('jsdom').JSDOM;\n    return new JSDOM(string).window.document;\n  }\n}\n\nexport default canParseHTMLNatively()\n  ? (root as Window & typeof globalThis).DOMParser\n  : Parser;\n","import collapseWhitespace from '../util/collapse-whitespace';\nimport isBlock from '../util/isBlock';\nimport isVoid from '../util/isVoid';\nimport HTMLParser from './HTMLParser';\n\nvar _htmlParser: DOMParser;\n\nfunction htmlParser() {\n  _htmlParser = _htmlParser || new HTMLParser();\n  return _htmlParser;\n}\n\nexport function createRootNode(input: string) {\n  var root;\n  if (typeof input === 'string') {\n    var doc = htmlParser().parseFromString(\n      // DOM parsers arrange elements in the <head> and <body>.\n      // Wrapping in a custom element ensures elements are reliably arranged in\n      // a single element.\n      '<x-sitdown id=\"root-node\">' + input + '</x-sitdown>',\n      'text/html'\n    );\n    root = doc.getElementById('root-node');\n  } else {\n    root = (input as HTMLElement).cloneNode(true);\n  }\n  collapseWhitespace({\n    element: root as HTMLElement,\n    isBlock: isBlock,\n    isVoid: isVoid,\n  });\n\n  return root;\n}\n\nexport default class RootNode {\n  constructor(input: string) {\n    // @ts-ignore\n    return createRootNode(input);\n  }\n}\n","import { Rule, Node, TagName, Options } from '../../types';\n\nfunction filterValue(rule: Rule, node: Node, options: Options) {\n  var filter = rule.filter;\n  if (typeof filter === 'string') {\n    return filter === node.nodeName.toLowerCase();\n  } else if (Array.isArray(filter)) {\n    return filter.indexOf(<TagName>node.nodeName.toLowerCase()) > -1;\n  } else if (typeof filter === 'function') {\n    return filter.call(rule, node, options);\n  } else {\n    throw new TypeError('`filter` needs to be a string, array, or function');\n  }\n}\n\nexport default function findRule(rules: Rule[], node: Node, options: Options) {\n  for (var i = 0; i < rules.length; i++) {\n    var rule = rules[i];\n    if (filterValue(rule, node, options)) return rule;\n  }\n  return void 0;\n}\n","/**\n * Manages a collection of rules used to convert HTML to Markdown\n */\nimport findRule from './findRule';\nimport {\n  Options,\n  ReplacementFunction,\n  Rule,\n  Node,\n  FilterFunction,\n} from '../../types';\n\nexport default class Rules {\n  private _keep: Rule[];\n  private _remove: Rule[];\n\n  options: Options;\n  array: Rule[];\n\n  blankRule: {\n    replacement: ReplacementFunction;\n  };\n  defaultRule: {\n    replacement: ReplacementFunction;\n  };\n  keepReplacement: ReplacementFunction;\n\n  constructor(options: Options) {\n    if (typeof options.blankReplacement !== 'function') {\n      throw Error('blankReplacement option must be function');\n    }\n\n    if (typeof options.keepReplacement !== 'function') {\n      throw Error('keepReplacement option must be function');\n    }\n\n    if (typeof options.defaultReplacement !== 'function') {\n      throw Error('defaultReplacement option must be function');\n    }\n    this.options = options;\n    this._keep = [];\n    this._remove = [];\n\n    this.blankRule = {\n      replacement: options.blankReplacement,\n    };\n\n    this.keepReplacement = options.keepReplacement;\n\n    this.defaultRule = {\n      replacement: options.defaultReplacement,\n    };\n\n    this.array = [];\n    for (var key in options.rules) this.array.push(options.rules[key]);\n  }\n\n  add(_key: string, rule: Rule) {\n    this.array.unshift(rule);\n  }\n\n  keep(filter: FilterFunction) {\n    this._keep.unshift({\n      filter: filter,\n      replacement: this.keepReplacement,\n    });\n  }\n\n  remove(filter: FilterFunction) {\n    this._remove.unshift({\n      filter: filter,\n      replacement() {\n        return '';\n      },\n    });\n  }\n\n  forNode(node: Node) {\n    if (node.isBlank) return this.blankRule;\n    var rule;\n\n    if ((rule = findRule(this.array, node, this.options))) return rule;\n    if ((rule = findRule(this._keep, node, this.options))) return rule;\n    if ((rule = findRule(this._remove, node, this.options))) return rule;\n\n    return this.defaultRule;\n  }\n\n  forEach(fn: (item: any, i: number) => void) {\n    for (var i = 0; i < this.array.length; i++) fn(this.array[i], i);\n  }\n}\n","import isVoid, { voidElements } from '../../util/isVoid';\nimport { Node } from '../../types';\n\nvar voidSelector = voidElements.join();\nfunction hasVoid(node: Node) {\n  return node.querySelector && node.querySelector(voidSelector);\n}\nexport default function isBlank(node: Node) {\n  return (\n    [\n      'A',\n      'TABLE',\n      'THEAD',\n      'TBODY',\n      'TR',\n      'TH',\n      'TD',\n      'IFRAME',\n      'SCRIPT',\n      'AUDIO',\n      'VIDEO',\n    ].indexOf(node.nodeName) === -1 &&\n    /^\\s*$/i.test(node.textContent || '') &&\n    !isVoid(node) &&\n    !hasVoid(node)\n  );\n}\n","import isBlock from '../../util/isBlock';\nimport { Node } from '../../types';\n\nexport default function flankingWhitespace(node: Node) {\n  var leading = '';\n  var trailing = '';\n\n  if (!node.isBlock) {\n    var hasLeading = /^[ \\r\\n\\t]/.test(node.textContent || '');\n    var hasTrailing = /[ \\r\\n\\t]$/.test(node.textContent || '');\n\n    if (hasLeading && !isFlankedByWhitespace('left', node)) {\n      leading = ' ';\n    }\n    if (hasTrailing && !isFlankedByWhitespace('right', node)) {\n      trailing = ' ';\n    }\n  }\n\n  return { leading: leading, trailing: trailing };\n}\n\nfunction isFlankedByWhitespace(side: string, node: Node) {\n  var sibling;\n  var regExp;\n  var isFlanked;\n\n  if (side === 'left') {\n    sibling = node.previousSibling;\n    regExp = / $/;\n  } else {\n    sibling = node.nextSibling;\n    regExp = /^ /;\n  }\n\n  if (sibling) {\n    if (sibling.nodeType === 3) {\n      isFlanked = regExp.test(sibling.nodeValue || '');\n    } else if (sibling.nodeType === 1 && !isBlock(sibling as Node)) {\n      isFlanked = regExp.test(sibling.textContent || '');\n    }\n  }\n  return isFlanked;\n}\n","import isBlock from '../../util/isBlock';\nimport isBlank from './isBlank';\nimport flankingWhitespace from './flankingWhitespace';\n\nexport default class Node {\n  unNeedEscape?: boolean;\n  data?: string;\n  isBlank?: boolean;\n  isBlock?: boolean;\n  isCode?: boolean;\n  flankingWhitespace?: {\n    leading: string;\n    trailing: string;\n  };\n\n  constructor(node: HTMLElement) {\n    const newNode = node as Node & HTMLElement;\n    newNode.isBlock = isBlock(node);\n    newNode.isCode =\n      node.nodeName.toLowerCase() === 'code' ||\n      (node.parentNode as Node).isCode;\n    newNode.isBlank = isBlank(node);\n    newNode.flankingWhitespace = flankingWhitespace(node);\n    return Object.assign(node, newNode);\n  }\n}\n","var leadingNewLinesRegExp = /^\\n*/;\nvar trailingNewLinesRegExp = /\\n*$/;\n\nfunction separatingNewlines(output: string, replacement: string) {\n  var outputNewLines = output.match(trailingNewLinesRegExp);\n  var replacementNewLines = replacement.match(leadingNewLinesRegExp);\n  var newlines = [\n    outputNewLines ? outputNewLines[0] : '',\n    replacementNewLines ? replacementNewLines[0] : '',\n  ].sort();\n  var maxNewlines = newlines[newlines.length - 1];\n  return maxNewlines.length < 2 ? maxNewlines : '\\n\\n';\n}\n\n/**\n * Determines the new lines between the current output and the replacement\n * @private\n * @param {String} output The current conversion output\n * @param {String} replacement The string to append to the output\n * @returns The whitespace to separate the current output and the replacement\n * @type String\n */\n\nexport default function join(string1: string, string2: string) {\n  var separator = separatingNewlines(string1, string2);\n\n  // Remove trailing/leading newlines and replace with separator\n  string1 = string1.replace(trailingNewLinesRegExp, '');\n  string2 = string2.replace(leadingNewLinesRegExp, '');\n\n  return string1 + separator + string2;\n}\n","import { createRootNode } from './RootNode';\nimport Rules from './Rules';\nimport Node from './Node';\nimport join from '../util/join';\nimport { Options, Node as NodeType, Rule, FilterFunction } from '../types';\n\nvar rules = {};\n\nvar reduce = Array.prototype.reduce;\nvar escapes = [\n  [/\\\\/g, '\\\\\\\\'],\n  [/\\*/g, '\\\\*'],\n  [/^-/g, '\\\\-'],\n  [/^\\+ /g, '\\\\+ '],\n  [/^(=+)/g, '\\\\$1'],\n  [/^(#{1,6}) /g, '\\\\$1 '],\n  [/`/g, '\\\\`'],\n  [/^~~~/g, '\\\\~~~'],\n  [/\\[/g, '\\\\['],\n  [/\\]/g, '\\\\]'],\n  [/^>/g, '\\\\>'],\n  [/_/g, '\\\\_'],\n  [/^(\\d+)\\. /g, '$1\\\\. '],\n  // escapes\n  [/^(\\d+)\\. /g, '$1\\\\. '],\n  [/!/g, '\\\\!'],\n  // [/\"/g, '\\\\\"'],\n  // [/'/g, `\\\\'`],\n  // [/#/g, '\\\\#'],\n  [/\\$/g, '\\\\$'],\n  [/%/g, '\\\\%'],\n  [/&/g, '\\\\&'],\n  [/\\(/g, '\\\\('],\n  [/\\)/g, '\\\\)'],\n  // [/\\+/g, '\\\\+'],\n  // [/\\-/g, '\\\\-'],\n  // [/\\,/g, '\\\\,'],\n  // [/\\./g, '\\\\.'],\n  // [/\\:/g, '\\\\:'],\n  // [/\\;/g, '\\\\;'],\n  [/\\</g, '\\\\<'],\n  // [/\\>/g, '\\\\>'],\n  // [/\\=/g, '\\\\='],\n  [/\\?/g, '\\\\?'],\n  [/\\{/g, '\\\\{'],\n  // [/\\|/g, '\\\\|'],\n  [/\\}/g, '\\\\}'],\n  [/\\~/g, '\\\\~'],\n  [/\\^/g, '\\\\^'],\n  [/\\@/g, '\\\\@'],\n  // [/\\//g, '\\\\/'],\n];\n\nclass Service {\n  options: Options;\n  rules: Rules;\n\n  constructor(options: Options) {\n    var defaults = {\n      rules: rules,\n      headingStyle: 'setext',\n      hr: '* * *',\n      bulletListMarker: '*',\n      codeBlockStyle: 'indented',\n      fence: '```',\n      emDelimiter: '_',\n      strongDelimiter: '**',\n      linkStyle: 'inlined',\n      linkReferenceStyle: 'full',\n      br: '  ',\n      blankReplacement: function(_content: string, node: NodeType) {\n        return node.isBlock ? '\\n\\n' : '';\n      },\n      keepReplacement: function(_content: string, node: NodeType) {\n        return node.isBlock ? '\\n\\n' + node.outerHTML + '\\n\\n' : node.outerHTML;\n      },\n      defaultReplacement: function(content: string, node: NodeType) {\n        return node.isBlock ? '\\n\\n' + content + '\\n\\n' : content;\n      },\n    };\n    this.options = Object.assign({}, defaults, options);\n    this.rules = new Rules(this.options);\n  }\n\n  /**\n   * The entry point for converting a string or DOM node to Markdown\n   * @public\n   * @param {String|HTMLElement} input The string or DOM node to convert\n   * @returns A Markdown representation of the input\n   * @type String\n   */\n\n  turndown(input: string) {\n    if (!canConvert(input)) {\n      throw new TypeError(\n        input + ' is not a string, or an element/document/fragment node.'\n      );\n    }\n\n    if (input === '') return '';\n\n    const node = createRootNode(input) as NodeType;\n    if (node) {\n      var output = this.process(node);\n      return this.postProcess(output);\n    } else {\n      return input;\n    }\n  }\n\n  /**\n   * Reduces a DOM node down to its Markdown string equivalent\n   * @private\n   * @param {HTMLElement} parentNode The node to convert\n   * @returns A Markdown representation of the node\n   * @type String\n   */\n\n  process(parentNode: NodeType) {\n    const rst = reduce.call(\n      parentNode.childNodes,\n      (output, node) => {\n        node = new Node(node);\n\n        var replacement = '';\n        if (node.nodeType === 3) {\n          replacement =\n            node.isCode || node.unNeedEscape\n              ? node.nodeValue\n              : this.escape(node.nodeValue);\n        } else if (node.nodeType === 1) {\n          replacement = this.replacementForNode(node);\n        } else if (node.nodeType === 8) {\n          replacement = '<!--' + node.nodeValue + '-->';\n        }\n\n        return join(String(output), replacement);\n      },\n      ''\n    );\n    return String(rst);\n  }\n\n  /**\n   * Appends strings as each rule requires and trims the output\n   * @private\n   * @param {String} output The conversion output\n   * @returns A trimmed version of the ouput\n   * @type String\n   */\n\n  postProcess(output: string) {\n    this.rules.forEach(rule => {\n      if (typeof rule.append === 'function') {\n        output = join(output, rule.append(this.options));\n      }\n      if (typeof rule.unshift === 'function') {\n        output = join(rule.unshift(this.options), output);\n      }\n    });\n\n    return output.replace(/^[\\t\\r\\n]+/, '').replace(/[\\t\\r\\n\\s]+$/, '');\n  }\n\n  /**\n   * Add one or more plugins\n   * @public\n   * @param {Function|Array} plugin The plugin or array of plugins to add\n   * @returns The instance for chaining\n   * @type Object\n   */\n\n  use(plugin: any) {\n    if (Array.isArray(plugin)) {\n      for (var i = 0; i < plugin.length; i++) this.use(plugin[i]);\n    } else if (typeof plugin === 'function') {\n      plugin(this);\n    } else {\n      throw new TypeError('plugin must be a Function or an Array of Functions');\n    }\n    return this;\n  }\n\n  /**\n   * Adds a rule\n   * @public\n   * @param {String} key The unique key of the rule\n   * @param {Object} rule The rule\n   * @returns The instance for chaining\n   * @type Object\n   */\n\n  addRule(key: string, rule: Rule) {\n    this.rules.add(key, rule);\n    return this;\n  }\n\n  /**\n   * Keep a node (as HTML) that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The instance for chaining\n   * @type Object\n   */\n\n  keep(filter: FilterFunction) {\n    this.rules.keep(filter);\n    return this;\n  }\n\n  /**\n   * Remove a node that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The instance for chaining\n   * @type Object\n   */\n\n  remove(filter: FilterFunction) {\n    this.rules.remove(filter);\n    return this;\n  }\n\n  /**\n   * Escapes Markdown syntax\n   * @public\n   * @param {String} string The string to escape\n   * @returns A string with Markdown syntax escaped\n   * @type String\n   */\n\n  escape(string: string) {\n    return escapes.reduce(function(accumulator, escape) {\n      return accumulator.replace(escape[0], <string>escape[1]);\n    }, string);\n  }\n\n  /**\n   * Converts an element node to its Markdown equivalent\n   * @private\n   * @param {HTMLElement} node The node to convert\n   * @returns A Markdown representation of the node\n   * @type String\n   */\n\n  replacementForNode(node: NodeType) {\n    var rule = this.rules.forNode(node);\n    var content = this.process(node);\n    var whitespace = node.flankingWhitespace || { leading: '', trailing: '' };\n    if (whitespace.leading || whitespace.trailing) content = content.trim();\n    return (\n      whitespace.leading +\n      (rule.replacement ? rule.replacement(content, node, this.options) : '') +\n      whitespace.trailing\n    );\n  }\n}\n\n/**\n * Determines whether an input can be converted\n * @private\n * @param {String|HTMLElement} input Describe this parameter\n * @returns Describe what it returns\n * @type String|Object|Array|Boolean|Number\n */\n\nfunction canConvert(input: NodeType | string) {\n  return (\n    input != null &&\n    (typeof input === 'string' ||\n      (input.nodeType &&\n        (input.nodeType === 1 ||\n          input.nodeType === 9 ||\n          input.nodeType === 11)))\n  );\n}\n\nexport default Service;\nexport { createRootNode } from './RootNode';\n","import applyPlugins from './plugins';\nimport { blankReplacement, keepReplacement } from './util';\nimport Service from './service';\nimport * as Util from './util';\nimport { Options } from './types';\n\nexport class Sitdown {\n  defaultOptions: Options;\n  service: Service;\n\n  constructor(options?: Options) {\n    this.defaultOptions = {\n      headingStyle: 'atx',\n      blankReplacement,\n      keepReplacement,\n    };\n    this.service = new Service({\n      ...this.defaultOptions,\n      ...options,\n    });\n    applyPlugins(this.service);\n  }\n\n  HTMLToMD(html: string, env?: object) {\n    if (env) {\n      this.service.options.env = env;\n    }\n    return this.service.turndown(html);\n  }\n\n  use(plugin: Plugin | Plugin[]) {\n    this.service.use(plugin);\n    return this;\n  }\n}\nexport type Plugin = (service: Service) => void;\nexport { default as RootNode } from './service/RootNode';\nexport { Util };\n","import Service from '../service';\nimport { applyListRule } from './list';\nimport { applyHrRule } from './hr';\nimport { applyParagraphRule } from './paragraph';\nimport { applyHeadingRule } from './heading';\nimport { applyFenceRule } from './fencedCodeBlock';\nimport { applyCodeRule } from './code';\nimport { applyReferenceLinkRule } from './referenceLinks';\nimport { applyTableRule } from './table';\nimport { applyIndentedCodeBlockRule } from './indentedCodeBlock';\nimport { applyBlockquoteRule } from './blockquote';\nimport { applyEmRule } from './em';\nimport { applyDelRule } from './del';\nimport { applyLinkRule } from './link';\nimport { applyImageRule } from './image';\nimport { applyBrRule } from './br';\nimport { applyStrongRule } from './strong';\nimport { applyTaskRule } from './taskListItems';\n\nimport { isKeep } from '../util/isKeep';\n\nexport default (service: Service) => {\n  service.use([\n    applyListRule,\n    applyHrRule,\n    applyParagraphRule,\n    applyHeadingRule,\n    applyFenceRule,\n    applyCodeRule,\n    applyReferenceLinkRule,\n    applyTableRule,\n    applyIndentedCodeBlockRule,\n    applyBlockquoteRule,\n    applyEmRule,\n    applyDelRule,\n    applyLinkRule,\n    applyBrRule,\n    applyStrongRule,\n    applyImageRule,\n    applyTaskRule,\n  ]);\n\n  service.keep(node => {\n    if (isKeep(service.options, node)) {\n      if (node.parentNode) {\n        const index = Array.from(node.parentNode.childNodes).findIndex(\n          n => n === node\n        );\n        const next: ChildNode & { unNeedEscape?: boolean } =\n          node.parentNode.childNodes[index + 1];\n        next && (next.unNeedEscape = true);\n      }\n      return true;\n    }\n    return false;\n  });\n};\n"],"names":["escape","escapes","string","reduce","accumulator","replace","isFence","options","node","codeBlockStyle","nodeName","firstChild","isCode","parentNode","previousSibling","nextSibling","isKeep","filters","keepFilter","Array","isArray","some","filter","toLowerCase","fenceReplacement","content","language","className","match","endFence","undefined","fence","parent","startFence","textContent","endsWith","findParentNumber","parentName","count","repeat","character","join","IndentCodeIsListfirstChild","list","findOrderListIndentNumber","start","getAttribute","length","ListNode","lineIndent","nestOLCount","this","nestULCount","nestCount","indent","caclPrefix","input","prefix","isNewList","inLast","isLoose","followCode","nestListAndParentIsEmpty","parentIsOL","index","prototype","indexOf","call","children","Number","trimStart","lastChild","innerHTML","outerHTML","listReplacement","listNode","bulletListMarker","test","keepReplacement","html","attrs","i","attributes","attr","name","nodeValue","localName","isBlock","blankReplacement","delimiter","codeDelimiter","applyListRule","service","addRule","replacement","lastElementChild","applyHrRule","_","__","hr","applyParagraphRule","from","childNodes","item","nodeType","applyHeadingRule","hLevel","charAt","headingStyle","applyFenceRule","applyCodeRule","trim","leadingSpace","trailingSpace","matches","applyReferenceLinkRule","linkStyle","href","decodeURIComponent","includes","reference","title","linkReferenceStyle","id","references","push","unshift","p1","p2","every","cell","convertNoHeaderTable","isHeadingRow","tr","element","n","applyTableRule","keep","rows","borderCells","alignMap","left","right","center","border","curNode","align","style","textAlign","hasHead","querySelector","cells","row","createTHead","insertRow","insertCell","e","console","log","applyIndentedCodeBlockRule","isFirstChild","IndentCodeIsfirstChild","caclListIndent","applyBlockquoteRule","blank","applyEmRule","emDelimiter","applyDelRule","specialChars","applyLinkRule","normalizeHref","split","char","applyImageRule","_content","alt","src","applyBrRule","_node","br","applyStrongRule","strongDelimiter","applyTaskRule","type","checked","remove","next","removeChild","prev","current","isPre","blockElements","voidElements","isVoid","root","window","canParseHTMLNatively","Parser","DOMParser","canParse","parseFromString","_htmlParser","JSDOM","require","document","createRootNode","prevText","prevVoid","text","data","substr","nextElementSibling","findIndex","unNeedEscape","nextNode","collapseWhitespace","HTMLParser","getElementById","cloneNode","filterValue","rule","TypeError","findRule","rules","Rules","Error","defaultReplacement","key","_keep","_remove","blankRule","defaultRule","array","add","_key","forNode","isBlank","forEach","fn","voidSelector","isFlankedByWhitespace","side","sibling","regExp","isFlanked","Node","newNode","hasVoid","flankingWhitespace","leading","trailing","hasLeading","hasTrailing","Object","assign","leadingNewLinesRegExp","trailingNewLinesRegExp","string1","string2","outputNewLines","replacementNewLines","newlines","maxNewlines","separator","sort","Service","turndown","canConvert","output","process","postProcess","rst","_this","replacementForNode","String","append","_this2","use","plugin","whitespace","Sitdown","defaultOptions","HTMLToMD","env"],"mappings":"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"}